

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (19 June 2023 20:07:06) as /mnt/data/facu/inge1/ejercicios/cuis/CuisUniversity-5832.image!


----SNAPSHOT----(19 June 2023 20:07:09) CuisUniversity-5832.image priorSource: 9366758!

----SNAPSHOT----(19 June 2023 20:07:12) CuisUniversity-5832.image priorSource: 9366951!

----End fileIn of /mnt/data/facu/inge1/ejercicios/cuis/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/cuis/Packages/Features/Compression.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/cuis/Packages/Features/Sound.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/cuis/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/cuis/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/cuis/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/consignas/09-TusLibros/WebClient.pck.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/consignas/09-TusLibros/TusLibros-Tests Ejercicio it4.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/consignas/09-TusLibros/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /mnt/data/facu/inge1/ejercicios/consignas/09-TusLibros/TusLibrosREST Ejercicio it4.st----!

----SNAPSHOT----(19 June 2023 20:08:31) CuisUniversity-5832.image priorSource: 9367040!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:08:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FGCL 6/19/2023 20:08:45'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FGCL 6/19/2023 20:08:47'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'parallelization' stamp: 'FGCL 6/19/2023 20:09:25'!
parallellyDo: aBlock
	| semaphore |
	
	semaphore := Semaphore new.
	[
		aBlock value.
		semaphore signal.
	] fork.
	^semaphore.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FGCL 6/19/2023 20:09:58' prior: 50663056!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales moneySemaphore salesSemaphore |

	bookPerformance := Dictionary new.
	
	salesSemaphore := self parallellyDo: [ totalSales := self totalSalesOf: anItem ].
	moneySemaphore := self parallellyDo: [ totalMoney := self totalMoneyRaisedBy: anItem ].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FGCL 6/19/2023 20:10:09' prior: 50664069!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales moneySemaphore salesSemaphore |

	bookPerformance := Dictionary new.
	
	salesSemaphore := self parallellyDo: [ totalSales := self totalSalesOf: anItem ].
	moneySemaphore := self parallellyDo: [ totalMoney := self totalMoneyRaisedBy: anItem ].
	salesSemaphore wait. moneySemaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FGCL 6/19/2023 20:10:20' prior: 50663097!
storePerformance

	| totalMoney totalSales performance moneySemaphore salesSemaphore |
	
	performance := Dictionary new.
	
	salesSemaphore := self parallellyDo: [ totalSales := self totalSales ].
	moneySemaphore := self parallellyDo: [ totalMoney := self totalMoneyRaised ].
	salesSemaphore wait. moneySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

----SNAPSHOT----(19 June 2023 20:10:24) CuisUniversity-5832.image priorSource: 10632183!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:10:27'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FGCL 6/19/2023 20:10:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FGCL 6/19/2023 20:10:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FGCL 6/19/2023 20:10:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FGCL 6/19/2023 20:10:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FGCL 6/19/2023 20:10:34'!
PASSED!

----SNAPSHOT----(19 June 2023 20:10:37) CuisUniversity-5832.image priorSource: 10639502!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!

----SNAPSHOT----(19 June 2023 20:15:28) CuisUniversity-5832.image priorSource: 10647000!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:31:17' prior: 50663619!
createCart

	| newCartId |
	
	[
		newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived
	] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:32:06' prior: 50663628!
listCart

	| cartId |
	
	[
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].
	] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:33:26' prior: 50664383!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:33:31' prior: 50664393!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

----SNAPSHOT----(19 June 2023 20:33:33) CuisUniversity-5832.image priorSource: 10647199!

WebServer reset.!

----SNAPSHOT----(19 June 2023 20:35:21) CuisUniversity-5832.image priorSource: 10648744!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:38:31' prior: 50664414!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		[
			currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
		]
	].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:38:33' prior: 50664431!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		[
			currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
		] fork.
	].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:38:45' prior: 50664405!
createCart

	| newCartId |
	
	[
		newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived
	] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:38:59' prior: 50663606!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		[
			restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
		] fork.
	]! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

----SNAPSHOT----(19 June 2023 20:42:33) CuisUniversity-5832.image priorSource: 10648853!

WebServer reset.!

----SNAPSHOT----(19 June 2023 20:43:01) CuisUniversity-5832.image priorSource: 10650552!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:46:04' prior: 50664465!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
	restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
	self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:46:05' prior: 50664488!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:46:11' prior: 50664455!
createCart

	| newCartId |
	
newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
cartIds add: newCartId.
self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:46:18' prior: 50664443!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
	].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:46:21' prior: 50664514!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:49:45' prior: 50664501!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface do: [ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId ]
					onSuccess: [ 	self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
					onError: [ :anError | "self popup: anError messageText" ].
	]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:51:25'!
do: anActionBlock onSuccess: aSuccessBlock onError: anErrorBlock
	[
		
		anActionBlock value.
		
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:52:43' prior: 50664559!
do: anActionBlock onSuccess: aSuccessBlock onError: anErrorBlock
	[
		anActionBlock on: Error do: anErrorBlock.
		aSuccessBlock value.
	] fork.! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:54:25' prior: 50664543!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | "self popup: anError messageText" ].
	]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:54:37'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:54:59' prior: 50664593!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |

	self do: [
		fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
			
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[^self error: resp content]
	] onSuccess: aSuccessBlock onError: anErrorBlock.! !

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs: stamp: 'FGCL 6/19/2023 20:55:10'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:56:24'!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |
	
	self do: [
		fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
		
		resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
			ifFalse:[^self error: resp content]
		]  onSuccess: aSuccessBlock onError: anErrorBlock.! !

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password: stamp: 'FGCL 6/19/2023 20:56:26'!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:56:28' prior: 50664610!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |

	self do: [
		fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
			
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[^self error: resp content]
		] onSuccess: aSuccessBlock onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:56:31' prior: 50664681!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |

	self do: [
		fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
			
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[^self error: resp content]
	] onSuccess: aSuccessBlock onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:56:33' prior: 50664648!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |
	
	self do: [
		fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
		
		resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
			ifFalse:[^self error: resp content]
	]  onSuccess: aSuccessBlock onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:56:47'!
listCart: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	| fieldDict resp |
	
	self do: [
		fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
			ifFalse:[^self error: resp content]
	] onSuccess: aSuccessBlock onError: anErrorBlock.! !

!methodRemoval: TusLibrosClientRestInterface #listCart: stamp: 'FGCL 6/19/2023 20:56:49'!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:56:55' prior: 50664737!
listCart: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	self do: [
		| fieldDict resp |
		
		fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
		
		resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
			ifFalse:[^self error: resp content]
	] onSuccess: aSuccessBlock onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:57:03' prior: 50664719!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock onError: anErrorBlock

	self do: [
		| fieldDict resp |
	
		fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
		
		resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
			ifFalse:[^self error: resp content]
	]  onSuccess: aSuccessBlock onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 20:57:13' prior: 50664700!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	self do: [
		| fieldDict resp |
		
		fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
			
		resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
			
		resp isSuccess 
			ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
			ifFalse:[^self error: resp content]
	] onSuccess: aSuccessBlock onError: anErrorBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:57:40' prior: 50664578!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | "self popup: anError messageText" ].
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 20:59:39' prior: 50664534!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk'
		onSuccess: [ :newCartId |
			cartIds add: newCartId.
			self triggerEvent: #newCartIdArrived.
		] onError: [ :anError | "TODO" ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:01:01' prior: 50664523!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		
		restInterface listCart: cartId
			onSuccess: [ :cartContent |
				currentSelectedCartContent := cartContent.
				self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId.
			] onError: [ :anError | "TODO" ].
	].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 21:02:12' prior: 50664803!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	self submitWithFieldDict: (Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity})
		toUrl: '/addToCart'
		onSuccess: aSuccessBlock
		onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 21:02:52'!
submitWithFieldDict: aFieldDict toUrl: anUrl onSuccess: aSuccessBlock onError: anErrorBlock
	[
		[] on: Error do: anErrorBlock.
		aSuccessBlock value.
	] fork.! !

!methodRemoval: TusLibrosClientRestInterface #do:onSuccess:onError: stamp: 'FGCL 6/19/2023 21:02:54'!
do: anActionBlock onSuccess: aSuccessBlock onError: anErrorBlock
	[
		anActionBlock on: Error do: anErrorBlock.
		aSuccessBlock value.
	] fork.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 21:04:02' prior: 50664876!
submitWithFieldDict: aFieldDict toUrl: anUrl onSuccess: aSuccessBlock onError: anErrorBlock
	[
		| resp |
		resp := WebClient htmlSubmit: (self url, anUrl) fields: aFieldDict.
			
		resp isSuccess 
			ifTrue: [ aSuccessBlock value: (WebUtils jsonDecode: ((resp content) readStream)) ]
			ifFalse:[ anErrorBlock value: resp content ].
	] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 21:04:45' prior: 50664785!
createCartFor: aUser password: aPassword onSuccess: aSuccessBlock onError: anErrorBlock

	self submitWithFieldDict: (Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword})
		toUrl: '/createCart'
		onSuccess: aSuccessBlock
		onError: anErrorBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FGCL 6/19/2023 21:05:16' prior: 50664767!
listCart: cartId onSuccess: aSuccessBlock onError: anErrorBlock

	self submitWithFieldDict: (Dictionary newFromPairs: {'cartId'. cartId. })
		toUrl: '/listCart'
		onSuccess: aSuccessBlock
		onError: anErrorBlock.! !

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

----SNAPSHOT----(19 June 2023 21:06:00) CuisUniversity-5832.image priorSource: 10650661!

WebServer reset.!

----SNAPSHOT----(19 June 2023 21:06:47) CuisUniversity-5832.image priorSource: 10665028!

----SNAPSHOT----(19 June 2023 21:07:04) CuisUniversity-5832.image priorSource: 10665137!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:09:10' prior: 50664823!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | self triggerEvent: #errorOcurred with: anError ].
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:09:37' prior: 50664943!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | self triggerError: anError ].
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'triggers' stamp: 'FGCL 6/19/2023 21:09:49'!
triggerError: anError
	self triggerEvent: #errorOcurred with: anError.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:09:59' prior: 50664839!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk'
		onSuccess: [ :newCartId |
			cartIds add: newCartId.
			self triggerEvent: #newCartIdArrived.
		] onError: [ :anError | self triggerError: anError ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:10:03' prior: 50664849!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		
		restInterface listCart: cartId
			onSuccess: [ :cartContent |
				currentSelectedCartContent := cartContent.
				self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId.
			] onError: [ :anError | self triggerError: anError ].
	].! !

----SNAPSHOT----(19 June 2023 21:10:15) CuisUniversity-5832.image priorSource: 10665227!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:10:27' prior: 50664960!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := 0."self selectedCartId."
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | self triggerError: anError ].
	]! !

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:11:16' prior: 50665010!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := 2."self selectedCartId."
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | self triggerError: anError ].
	]! !

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'FGCL 6/19/2023 21:12:07' prior: 50663385!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorOcurred send: #informError: to: self.! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'FGCL 6/19/2023 21:12:44'!
informErorr: anError

	self inform: 'ERROR: ', anError asString.
	
! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'FGCL 6/19/2023 21:13:14'!
informError: anError

	self inform: 'ERROR: ', anError asString.
	
! !

!methodRemoval: TusLibrosClientTestWindow #informErorr: stamp: 'FGCL 6/19/2023 21:13:14'!
informErorr: anError

	self inform: 'ERROR: ', anError asString.
	
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:13:52' prior: 50665030!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: [ :anError | self triggerError: anError ].
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:14:07' prior: 50664981!
createCart

	restInterface createCartFor: 'hernan' password: 'bigtalk'"'smalltalk'"
		onSuccess: [ :newCartId |
			cartIds add: newCartId.
			self triggerEvent: #newCartIdArrived.
		] onError: [ :anError | self triggerError: anError ].! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:14:32' prior: 50664992!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := 9."self selectedCartId."
		
		restInterface listCart: cartId
			onSuccess: [ :cartContent |
				currentSelectedCartContent := cartContent.
				self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId.
			] onError: [ :anError | self triggerError: anError ].
	].! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:14:55' prior: 50665107!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk'
		onSuccess: [ :newCartId |
			cartIds add: newCartId.
			self triggerEvent: #newCartIdArrived.
		] onError: [ :anError | self triggerError: anError ].! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:15:26' prior: 50665122!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		
		restInterface listCart: cartId
			onSuccess: [ :cartContent |
				currentSelectedCartContent := cartContent.
				self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId.
			] onError: [ :anError | self triggerError: anError ].
	].! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!

WebServer reset.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:16:43' prior: 50665140!
createCart

	restInterface createCartFor: 'hernan' password: 'smalltalk'
		onSuccess: [ :newCartId |
			cartIds add: newCartId.
			self triggerEvent: #newCartIdArrived.
		] onError: self triggerErrorBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'triggers' stamp: 'FGCL 6/19/2023 21:17:01'!
triggerErrorBlock
	^[ :anError | self triggerError: anError ]! !
!TusLibrosClientTestWindowModel methodsFor: 'triggers' stamp: 'FGCL 6/19/2023 21:17:11' prior: 50665184!
triggerErrorBlock
	^[ :anError | self triggerEvent: #errorOcurred with: anError ].! !

!methodRemoval: TusLibrosClientTestWindowModel #triggerError: stamp: 'FGCL 6/19/2023 21:17:14'!
triggerError: anError
	self triggerEvent: #errorOcurred with: anError.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:17:24' prior: 50665155!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue: [
		cartId := self selectedCartId.
		
		restInterface listCart: cartId
			onSuccess: [ :cartContent |
				currentSelectedCartContent := cartContent.
				self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId.
			] onError: self triggerErrorBlock.
	].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FGCL 6/19/2023 21:17:27' prior: 50665091!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId			
			onSuccess: [ :result | self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId) ]
			onError: self triggerErrorBlock.
	]! !

----SNAPSHOT----(19 June 2023 21:17:30) CuisUniversity-5832.image priorSource: 10667352!

----SNAPSHOT----(19 June 2023 21:17:49) CuisUniversity-5832.image priorSource: 10674542!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open.!

WebServer reset.!

----SNAPSHOT----(19 June 2023 21:18:31) CuisUniversity-5832.image priorSource: 10674632!

----SNAPSHOT----(19 June 2023 21:19:50) CuisUniversity-5832.image priorSource: 10674831!

----STARTUP---- (19 June 2023 21:20:28) as /mnt/data/facu/inge1/ejercicios/cuis/CuisUniversity-5832.image!


----SNAPSHOT----(19 June 2023 21:23:04) CuisUniversity-5832.image priorSource: 10674921!