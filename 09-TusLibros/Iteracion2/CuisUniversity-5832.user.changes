

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (9 June 2023 14:35:23) as /mnt/data/facu/inge1/ejercicios/cuis/CuisUniversity-5832.image!


----SNAPSHOT----(9 June 2023 14:35:48) CuisUniversity-5832.image priorSource: 9366758!

----End fileIn of /mnt/data/facu/inge1/ejercicios/consignas/09-TusLibros/TusLibros-18.st----!

----SNAPSHOT----(9 June 2023 14:36:05) CuisUniversity-5832.image priorSource: 9366950!

Object subclass: #TusLibrosTestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTestObjectFactory category: 'TusLibros' stamp: 'FGCL 6/9/2023 14:36:21'!
Object subclass: #TusLibrosTestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTestObjectFactory methodsFor: 'carts' stamp: 'FGCL 6/9/2023 14:37:05'!
createCart
	^Cart acceptingItemsOf: self defaultCatalog! !
!TusLibrosTestObjectFactory methodsFor: 'carts' stamp: 'FGCL 6/9/2023 14:37:05' prior: 50624571!
createCart
	^Cart acceptingItemsOf: self defaultCatalog.! !
!TusLibrosTestObjectFactory methodsFor: 'carts' stamp: 'FGCL 6/9/2023 14:37:20'!
defaultCatalog
	^ Array with: self itemSoldByTheStore.! !
!TusLibrosTestObjectFactory methodsFor: 'items' stamp: 'FGCL 6/9/2023 14:37:38'!
itemSoldByTheStore
	^ 'validBook'! !
!TusLibrosTestObjectFactory methodsFor: 'items' stamp: 'FGCL 6/9/2023 14:37:40' prior: 50624586!
itemSoldByTheStore
	^ 'validBook'.! !
!TusLibrosTestObjectFactory methodsFor: 'items' stamp: 'FGCL 6/9/2023 14:37:42' prior: 50624591!
itemSoldByTheStore
	^'validBook'.! !
!TusLibrosTestObjectFactory methodsFor: 'items' stamp: 'FGCL 6/9/2023 14:37:48'!
itemNotSoldByTheStore
	^'invalidBook'.! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FGCL 6/9/2023 14:38:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setup' stamp: 'FGCL 6/9/2023 14:38:09' overrides: 16961394!
setUp
	factory := TusLibrosTestObjectFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:38:18' prior: 50624494!
test01NewCartsAreCreatedEmpty

	self assert: factory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:38:22' prior: 50624472!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := factory createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:38:24' prior: 50624621!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := factory createCart.
	
	self 
		should: [ cart add: factory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:38:36' prior: 50624499!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := factory createCart.
	
	cart add: factory itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:38:46' prior: 50624459!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := factory createCart.
	
	self 
		should: [cart add: 0 of: factory itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:38:55' prior: 50624514!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := factory createCart.
	
	self 
		should: [cart add: 2 of: factory itemNotSoldByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:39:10' prior: 50624527!
test06CartRemembersAddedItems

	| cart |
	
	cart := factory createCart.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart includes: factory itemSoldByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:39:18' prior: 50624507!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := factory createCart.
	
	self deny: (cart includes: factory itemSoldByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:39:34' prior: 50624485!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := factory createCart.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart occurrencesOf: factory itemSoldByTheStore) = 2! !

!methodRemoval: CartTest #createCart stamp: 'FGCL 6/9/2023 14:39:37'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!

!methodRemoval: CartTest #defaultCatalog stamp: 'FGCL 6/9/2023 14:39:39'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'FGCL 6/9/2023 14:39:40'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'FGCL 6/9/2023 14:39:40'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 14:39:42'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/9/2023 14:39:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 14:39:42'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:39:50' prior: 50624634!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := factory createCart.
	
	self 
		should: [ cart add: factory itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/9/2023 14:39:51'!
PASSED!

----SNAPSHOT----(9 June 2023 14:39:54) CuisUniversity-5832.image priorSource: 9372965!

TestCase subclass: #CashierTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FGCL 6/9/2023 14:40:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'FGCL 6/9/2023 14:40:11' overrides: 16961394!
setUp
	factory := TusLibrosTestObjectFactory new.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/9/2023 14:42:50'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:42:42'!
test01CashierCantCheckOutEmptyCart
	| cashier |
	
	cashier := Cashier for: (factory createCart) withCreditCard: 0.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:42:56'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:42:56'!
ERROR!

----SNAPSHOT----(9 June 2023 14:42:58) CuisUniversity-5832.image priorSource: 9380508!
!Cashier class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 14:44:12'!
for: aCart with: aCreditCard
	^self new initializeFor: aCart with: aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:44:30'!
initializeFor: aCart with: aCreditCard
! !
!Cashier methodsFor: 'checkout' stamp: 'FGCL 6/9/2023 14:45:15'!
checkOut
	self error: Cashier emptyCartErrorMessage.! !
!Cashier class methodsFor: 'errors' stamp: 'FGCL 6/9/2023 14:45:28'!
emptyCartErrorMessage
	^'Cant checkout an empty cart'.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:45:30'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:45:30'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 14:45:38'!
for: aCart withCreditCard: aCreditCard
	^self new initializeFor: aCart with: aCreditCard.! !

!methodRemoval: Cashier class #for:with: stamp: 'FGCL 6/9/2023 14:45:38'!
for: aCart with: aCreditCard
	^self new initializeFor: aCart with: aCreditCard.!
!Cashier class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 14:45:41' prior: 50624862!
for: aCart withCreditCard: aCreditCard
	^self new initializeFor: aCart withCreditCard: aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:45:48'!
initializeFor: aCart withCreditCard: aCreditCard
! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:45:48'!
PASSED!

!methodRemoval: Cashier #checkOut stamp: 'FGCL 6/9/2023 14:45:56'!
checkOut
	self error: Cashier emptyCartErrorMessage.!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:45:57'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:45:57'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:46:04'!
checkOut
	self error: Cashier emptyCartErrorMessage.! !

----SNAPSHOT----(9 June 2023 14:46:06) CuisUniversity-5832.image priorSource: 9381908!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:46:34'!
test02CashierCanCheckOutCartWithOneItem
	| cashier |
	
	cashier := Cashier for: (factory createCart) withCreditCard: 0.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:47:53' prior: 50624904!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: 0.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart ticket) equals: cashier checkOut.! !

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:47:56'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:49:36' prior: 50624917!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: 0.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:51:19'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:51:19'!
ERROR!
!Cart methodsFor: 'getters' stamp: 'FGCL 6/9/2023 14:51:33'!
items
	^items copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/9/2023 14:51:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:51:39'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:51:39'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:51:42'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:51:42'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:51:42'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:51:57' prior: 50624897!
checkOut
	self error: Cashier emptyCartErrorMessage.! !

!methodRemoval: Cashier #initializeFor:with: stamp: 'FGCL 6/9/2023 14:51:59'!
initializeFor: aCart with: aCreditCard
!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/9/2023 14:52:04'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:52:03' prior: 50624879!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:52:20' prior: 50624993!
checkOut
	(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ].
	
	^cart items.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:52:23'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:52:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:53:22'!
test02CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: 0.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:53:26'!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: 0.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !

!methodRemoval: CashierTest #test02CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 14:53:26'!
test02CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: 0.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:53:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:53:29'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 14:53:29'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:54:03' prior: 50625013!
checkOut
	(cart size ~= 0) ifTrue: [ self error: Cashier emptyCartErrorMessage ].
	"(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ]."
	
	^cart items.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:54:04' prior: 50625066!
checkOut
	(cart size ~= 1) ifTrue: [ self error: Cashier emptyCartErrorMessage ].
	"(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ]."
	
	^cart items.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:54:05'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:54:05'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 14:54:05'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:54:13'!
FAILURE!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:54:13'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:54:25' prior: 50625075!
checkOut
	(cart items size ~= 1) ifTrue: [ self error: Cashier emptyCartErrorMessage ].
	"(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ]."
	
	^cart items.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:54:26'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:54:26'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 14:54:26'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 14:54:26'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:54:47' prior: 50625100!
checkOut
	(cart items size ~= 1) ifTrue: [ self error: Cashier emptyCartErrorMessage ]. " Esta versión pasa los test 1 y 2, pero no el 3, debería de haber sido la primera que hicimos. "
	"(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ]."
	
	^cart items.! !

----SNAPSHOT----(9 June 2023 14:54:48) CuisUniversity-5832.image priorSource: 9384023!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 14:54:52' prior: 50625122!
checkOut
	(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ].
	
	^cart items.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 14:54:52'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 14:54:52'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 14:54:52'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:56:07' prior: 50624817!
test01CashierCantCheckOutEmptyCart
	| cashier |
	
	cashier := Cashier for: (factory createCart) withCreditCard: factory createValidCard.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:56:13' prior: 50624931!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createValidCard.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:56:15' prior: 50625035!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createValidCard.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:57:02'!
test03CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createExpiredCreditCard.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:57:05' prior: 50625177!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createValidCreditCard.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:57:07' prior: 50625166!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createValidCreditCard.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 14:57:10' prior: 50625153!
test01CashierCantCheckOutEmptyCart
	| cashier |
	
	cashier := Cashier for: (factory createCart) withCreditCard: factory createValidCreditCard.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 14:57:27'!
createValidCreditCard
	^0.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 14:57:30'!
createExpiredCreditCard
	^1.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:03:39'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:03:35' prior: 50625240!
createExpiredCreditCard
	^CreditCard withExpiryYear: (GregorianYear createYear: 2000) andMonth: (GregorianMonth may).! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:03:55' prior: 50625236!
createValidCreditCard
	^CreditCard withExpiryYear: (GregorianYear createYear: 3000) andMonth: (GregorianMonth may).! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 15:04:33'!
withExpiryYear: aYear andMonth: aMonth
	^self initializeWithExpiryYear: aYear andMonth: aMonth.! !
!CreditCard methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:04:55'!
initializeWithExpiryYear: aYear andMonth: aMonth
! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:05:25' prior: 50625188!
test03CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createExpiredCreditCard.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:05:27'!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createExpiredCreditCard.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !

!methodRemoval: CashierTest #test03CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:05:27'!
test03CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createExpiredCreditCard.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:06:07' prior: 50625287!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createExpiredCreditCard.
	
	cart add: factory itemSoldByTheStore.
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText ].! !
!Cashier class methodsFor: 'errors' stamp: 'FGCL 6/9/2023 15:06:26'!
expiredCreditCardCartErrorMessage
	^'Cant use an expired credit card'.! !
!Cashier class methodsFor: 'errors' stamp: 'FGCL 6/9/2023 15:06:30'!
expiredCreditCardErrorMessage
	^'Cant use an expired credit card'.! !

!methodRemoval: Cashier class #expiredCreditCardCartErrorMessage stamp: 'FGCL 6/9/2023 15:06:30'!
expiredCreditCardCartErrorMessage
	^'Cant use an expired credit card'.!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:06:50' prior: 50625137!
checkOut
	(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ].
	
	^cart items.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:06:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:06:58' prior: 50625008!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.
	creditCard := aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:07:50' prior: 50625355!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.
	creditCard := aCreditCard.
	
	creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:08:36' prior: 50625311!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [ 	Cashier for: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:09:50' prior: 50625223!
test01CashierCantCheckOutEmptyCart
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createValidCreditCard.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: (Cashier emptyCartErrorMessage) equals: anError messageText.
			self assert: cart isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:10:12' prior: 50625370!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [ 	Cashier for: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText.
			self assert: creditCard isExpired.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:10:49' prior: 50625385!
test01CashierCantCheckOutEmptyCart
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: factory createValidCreditCard.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:11:00' prior: 50625400!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [ 	Cashier for: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:12:05'!
ifExpired: aBlock
	(self isExpired) ifTrue: aBlock value.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:12:20'!
isExpired
	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:12:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiryYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:12:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiryYear expiryMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:12:46' prior: 50625271!
initializeWithExpiryYear: aYear andMonth: aMonth
	expiryYear := aYear.
	expiryMonth := aMonth.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:16:09' prior: 50625449!
isExpired
	| date |
	
	date := GregorianDate year: expiryYear month: expiryMonth day: 1.
	
	^(date distanceTo: GregorianDate today) > 0.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:16:25' prior: 50625473!
isExpired
	| date |
	
	date := GregorianDate year: expiryYear month: expiryMonth day: 1.
	
	^(date distanceTo: GregorianDate from: (Date today)) > 0.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:17:13'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:17:13'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:17:13'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:17:13'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:17:16'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:17:16'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:17:30'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:17:30'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:17:30'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:17:30'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:17:31'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 15:17:44' prior: 50625265!
withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithExpiryYear: aYear andMonth: aMonth.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:17:46'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:17:46'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:17:46'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:17:46'!
ERROR!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:19:40' prior: 50625481!
isExpired
	| date |
	
	date := Date newDay: 1 month: expiryMonth year: expiryYear.
	^date <= Date today.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:19:44'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:19:44'!
ERROR!
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:20:04' prior: 50625251!
createExpiredCreditCard
	^CreditCard withExpiryYear: 2000 andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:20:10' prior: 50625258!
createValidCreditCard
	^CreditCard withExpiryYear: 3000 andMonth: #May.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:20:12'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:20:12'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:20:12'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:20:12'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:20:13'!
ERROR!
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:20:56' prior: 50625564!
createValidCreditCard
	^CreditCard withExpiryYear: (Date today year + 1) andMonth: #May.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/9/2023 15:20:58'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:20:58'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:21:41'!
ERROR!
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:22:11' prior: 50625586!
createValidCreditCard
	^CreditCard withExpiryYear: ((Date today year) + 1) andMonth: #May.! !

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:22:19'!
ERROR!
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:22:33' prior: 50625625!
createValidCreditCard
	^CreditCard withExpiryYear: (Date today year + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:22:42' prior: 50625558!
createExpiredCreditCard
	^CreditCard withExpiryYear: (Date today year - 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:23:14' prior: 50625635!
createValidCreditCard
	^CreditCard withExpiryYear: (Date today yearNumber + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:23:18' prior: 50625642!
createExpiredCreditCard
	^CreditCard withExpiryYear: (Date today yearNumber - 1) andMonth: #May.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/9/2023 15:23:19'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:23:19'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:23:19'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:23:19'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:23:19'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:23:22'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:23:22'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:23:22'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:23:22'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:23:23'!
ERROR!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:23:57' prior: 50625545!
isExpired
	| date |
	
	date := Date newDay: 1 month: expiryMonth year: expiryYear.
	^date < Date today.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:23:59'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:23:59'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:23:59'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:23:59'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:24:06'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:24:06'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:24:10'!
PASSED!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:25:38' prior: 50625718!
isExpired
	| date |
	
	date := Date newDay: (Date daysInMonth: expiryMonth forYear: expiryYear) month: expiryMonth year: expiryYear.
	^date < Date today.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:25:41'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:25:41'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:25:41'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:25:41'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:25:47'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:25:47'!
ERROR!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:26:02' prior: 50625444!
ifExpired: aBlock
	"(self isExpired) ifTrue: aBlock value."! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:26:04'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:26:04'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:26:04'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:26:04'!
FAILURE!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:26:04'!
FAILURE!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:26:07'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:26:16' prior: 50625361!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.
	creditCard := aCreditCard.
	
	"creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ]."! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:26:22' prior: 50625801!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.
	creditCard := aCreditCard.
	
	creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:26:25' prior: 50625776!
ifExpired: aBlock
	(self isExpired) ifTrue: aBlock value.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:26:31' prior: 50625748!
isExpired
	| date |
	
	date := Date newDay: (Date daysInMonth: expiryMonth forYear: expiryYear) month: expiryMonth year: expiryYear.
	"^date < Date today."
	^false.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:26:36'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:26:36'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:26:36'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:26:36'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:26:39'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:26:39'!
ERROR!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:26:49' prior: 50625819!
ifExpired: aBlock
	(self isExpired) ifTrue: [ aBlock value ].! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:26:53' prior: 50625852!
ifExpired: aBlock
	(self isExpired) ifTrue: aBlock.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:26:56'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:26:56'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:26:56'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:26:56'!
FAILURE!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:26:56'!
FAILURE!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:27:01' prior: 50625824!
isExpired
	| date |
	
	date := Date newDay: (Date daysInMonth: expiryMonth forYear: expiryYear) month: expiryMonth year: expiryYear.
	^date < Date today.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:27:03'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:27:03'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:27:03'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:27:03'!
PASSED!

----SNAPSHOT----(9 June 2023 15:27:06) CuisUniversity-5832.image priorSource: 9391447!
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:27:26' prior: 50625879!
isExpired
	| date |
	
	date := Date newDay: (Date daysInMonth: expiryMonth forYear: expiryYear) month: expiryMonth year: expiryYear.
	^(self expiryDate) < Date today.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:27:41'!
expiryDate
	^Date newDay: (Date daysInMonth: expiryMonth forYear: expiryYear) month: expiryMonth year: expiryYear.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:27:46' prior: 50625903!
isExpired
	^(self expiryDate) < Date today.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:28:07' prior: 50625911!
expiryDate
	^Date newDay: (self expiryDay) month: expiryMonth year: expiryYear.! !
!CreditCard methodsFor: 'expiration' stamp: 'FGCL 6/9/2023 15:28:14'!
expiryDay
	^Date daysInMonth: expiryMonth forYear: expiryYear.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:28:35' prior: 50625342!
checkOut
	self checkValidCheckOut.
	
	^cart items.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:28:48'!
checkValidCheckOut
	(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ].! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:28:58' prior: 50625937!
checkValidCheckOut
	self checkCartNotEmpty.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:29:04'!
checkCartNotEmpty
	(cart isEmpty) ifTrue: [ self error: Cashier emptyCartErrorMessage ].! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:29:21' prior: 50625810!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.
	creditCard := aCreditCard.
	
	self checkValidCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:29:30'!
checkValidCreditCard.
	creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:29:32'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:29:32'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:29:32'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:29:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/9/2023 15:32:00'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:32:01'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:32:01'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:32:01'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:32:01'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:32:29'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTestObjectFactory methodsFor: 'simulation' stamp: 'FGCL 6/9/2023 15:33:20'!
createMerchantProcessor
	^MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:34:03'!
test05CashierCantCheckoutWithAStolenCreditCard
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.
	merchantProcessor := factory createMerchantProcessor.

	self should: [ 	Cashier for: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText ].! !

!classRenamed: #MerchantProcessorSimulator as: #MerchantProcessor stamp: 'FGCL 6/9/2023 15:34:09'!
Smalltalk renameClassNamed: #MerchantProcessorSimulator as: #MerchantProcessor!
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/9/2023 15:34:09' prior: 50626031!
createMerchantProcessor
	^MerchantProcessor new.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:35:03' prior: 50626035!
test05CashierCantCheckoutWithAStolenCreditCard
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createStolenCreditCard.
	merchantProcessor := factory createMerchantProcessor.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText ].! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:36:11'!
createStolenCreditCard
	^CreditCard withExpiryYear: (Date today yearNumber + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:39:10' prior: 50626081!
createStolenCreditCard
	^CreditCard ofUser: 'Federico' withExpiryYear: (Date today yearNumber + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:39:21' prior: 50625649!
createValidCreditCard
	^CreditCard ofUser: 'Martin' withExpiryYear: (Date today yearNumber + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:39:30' prior: 50625656!
createExpiredCreditCard
	^CreditCard ofUser: (self validUser) withExpiryYear: (Date today yearNumber - 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:39:43' prior: 50626088!
createStolenCreditCard
	^CreditCard ofUser: (self invalidUser) withExpiryYear: (Date today yearNumber + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:39:52' prior: 50626095!
createValidCreditCard
	^CreditCard ofUser: (self validUser) withExpiryYear: (Date today yearNumber + 1) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/9/2023 15:40:06'!
validUser
	^'Martin'.! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/9/2023 15:40:10'!
invalidUser
	^'Galileo'.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:40:30' prior: 50626102!
createExpiredCreditCard
	^CreditCard ofUser: (self validUser) withExpiryYear: (self lastYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:40:39'!
lastYear
	^Date today yearNumber - 1.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:40:45'!
nextYear
	^Date today yearNumber + 1.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:40:50' prior: 50626118!
createValidCreditCard
	^CreditCard ofUser: (self validUser) withExpiryYear: (self nextYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/9/2023 15:40:55' prior: 50626110!
createStolenCreditCard
	^CreditCard ofUser: (self invalidUser) withExpiryYear: (self nextYear) andMonth: #May.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 15:41:21'!
ofUser: aUser withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithUser: aUser WithExpiryYear: aYear andMonth: aMonth.! !

!methodRemoval: CreditCard class #withExpiryYear:andMonth: stamp: 'FGCL 6/9/2023 15:41:31'!
withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithExpiryYear: aYear andMonth: aMonth.!
!CreditCard methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:41:42'!
initializeWithUser: aUser withExpiryYear: aYear andMonth: aMonth
	expiryYear := aYear.
	expiryMonth := aMonth.! !

!methodRemoval: CreditCard #initializeWithExpiryYear:andMonth: stamp: 'FGCL 6/9/2023 15:41:44'!
initializeWithExpiryYear: aYear andMonth: aMonth
	expiryYear := aYear.
	expiryMonth := aMonth.!
!CreditCard class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 15:41:48' prior: 50626164!
ofUser: aUser withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithUser: aUser withExpiryYear: aYear andMonth: aMonth.! !

----SNAPSHOT----(9 June 2023 15:42:22) CuisUniversity-5832.image priorSource: 9415978!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:42:24'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:42:24'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:42:24'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:42:24'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:42:24'!
ERROR!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:42:24'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FGCL 6/9/2023 15:43:02'!
for: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: Cashier class #for:withCreditCard: stamp: 'FGCL 6/9/2023 15:43:07'!
for: aCart withCreditCard: aCreditCard
	^self new initializeFor: aCart withCreditCard: aCreditCard.!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:43:13'!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	
	self checkValidCreditCard.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:43:42' prior: 50625416!
test01CashierCantCheckOutEmptyCart
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: (factory createValidCreditCard) withMerchantProcessor: (factory createMerchantProcessor).
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:43:49' prior: 50625212!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: (factory createValidCreditCard) withMerchantProcessor: (factory createMerchantProcessor).
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:43:53' prior: 50625200!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: (factory createValidCreditCard) withMerchantProcessor: (factory createMerchantProcessor).
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:44:01' prior: 50625430!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withMerchantProcessor: (factory createMerchantProcessor)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier expiredCreditCardErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:44:12'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:44:14'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:44:14'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:44:14'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:44:14'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:44:14'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:44:14'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:44:17'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:44:17'!
FAILURE!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:44:19'!
PASSED!

----SNAPSHOT----(9 June 2023 15:44:21) CuisUniversity-5832.image priorSource: 9425476!
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/9/2023 15:44:52' prior: 50625960!
checkValidCreditCard
	creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].! !
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/9/2023 15:45:04' prior: 50626337!
checkValidCreditCard
	self checkCreditCardNotExpired.
	! !
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/9/2023 15:45:07'!
checkCreditCardNotExpired
	creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].! !
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/9/2023 15:45:20' prior: 50626343!
checkValidCreditCard
	self checkCreditCardNotExpired.
	self checkCreditCardNotStolen.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:45:47'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/9/2023 15:45:45'!
checkCreditCardNotStolen
	merchantProcessor checkCreditCardNotStolen: creditCard.! !

!methodRemoval: Cashier #initializeFor:withCreditCard: stamp: 'FGCL 6/9/2023 15:45:53'!
initializeFor: aCart withCreditCard: aCreditCard
	cart := aCart.
	creditCard := aCreditCard.
	
	self checkValidCreditCard.!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:46:01' prior: 50626234!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:46:51' prior: 50626379!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	
	merchantProcessor checkValidCreditCard.! !

Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/9/2023 15:46:55'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:47:01' prior: 50626389!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	
	aMerchantProcessor checkValidCreditCard.! !
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:47:24'!
checkValidCreditCard
	self checkCreditCardNotExpired.
	self checkCreditCardNotStolen.! !

!methodRemoval: Cashier #checkValidCreditCard stamp: 'FGCL 6/9/2023 15:47:36'!
checkValidCreditCard
	self checkCreditCardNotExpired.
	self checkCreditCardNotStolen.!

!methodRemoval: Cashier #checkCreditCardNotStolen stamp: 'FGCL 6/9/2023 15:47:50'!
checkCreditCardNotStolen
	merchantProcessor checkCreditCardNotStolen: creditCard.!
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:48:03'!
checkCreditCardNotExpired: aCreditCard
	aCreditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].! !
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:48:12'!
checkValidCreditCard: aCreditCard
	self checkCreditCardNotExpired: aCreditCard.
	self checkCreditCardNotStolen: aCreditCard.! !

!methodRemoval: MerchantProcessor #checkValidCreditCard stamp: 'FGCL 6/9/2023 15:48:17'!
checkValidCreditCard
	self checkCreditCardNotExpired.
	self checkCreditCardNotStolen.!

!methodRemoval: Cashier #checkCreditCardNotExpired stamp: 'FGCL 6/9/2023 15:48:25'!
checkCreditCardNotExpired
	creditCard ifExpired: [ self error: Cashier expiredCreditCardErrorMessage ].!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/9/2023 15:48:29' prior: 50626409!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	
	aMerchantProcessor checkValidCreditCard: creditCard.! !
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:48:43'!
checkCreditCardNotStolen: aCreditCard! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:48:46'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:48:46'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:48:46'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:48:46'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:48:46'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:48:46'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:48:49'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:48:49'!
FAILURE!

----SNAPSHOT----(9 June 2023 15:48:51) CuisUniversity-5832.image priorSource: 9429880!

----SNAPSHOT----(9 June 2023 15:49:24) CuisUniversity-5832.image priorSource: 9435198!
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:49:47' prior: 50626469!
checkCreditCardNotStolen: aCreditCard! !
!MerchantProcessor class methodsFor: 'errors' stamp: 'FGCL 6/9/2023 15:50:01'!
expiredCreditCardErrorMessage
	^'Cant use an expired credit card'.! !
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:50:08' prior: 50626434!
checkCreditCardNotExpired: aCreditCard
	aCreditCard ifExpired: [ self error: MerchantProcessor expiredCreditCardErrorMessage ].! !

!methodRemoval: Cashier class #expiredCreditCardErrorMessage stamp: 'FGCL 6/9/2023 15:50:14'!
expiredCreditCardErrorMessage
	^'Cant use an expired credit card'.!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/9/2023 15:50:24' prior: 50626284!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withMerchantProcessor: (factory createMerchantProcessor)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/9/2023 15:50:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/9/2023 15:50:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/9/2023 15:50:28'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/9/2023 15:50:28'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:50:28'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/9/2023 15:50:28'!
FAILURE!
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:51:12' prior: 50626507!
checkCreditCardNotStolen: aCreditCard
	false ifTrue: [ self error: MerchantProcessor stolenCreditCardErrorMessage ].! !
!MerchantProcessor class methodsFor: 'errors' stamp: 'FGCL 6/9/2023 15:51:27'!
stolenCreditCardErrorMessage
	^'Cant use a solen credit card'.! !
!MerchantProcessor class methodsFor: 'errors' stamp: 'FGCL 6/9/2023 15:51:33' prior: 50626574!
stolenCreditCardErrorMessage
	^'Cant use a stolen credit card'.! !
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/9/2023 15:54:08' prior: 50626567!
checkCreditCardNotStolen: aCreditCard
	false ifTrue: [ self error: MerchantProcessor stolenCreditCardErrorMessage ].! !

----SNAPSHOT----(9 June 2023 16:09:13) CuisUniversity-5832.image priorSource: 9435286!

----STARTUP---- (11 June 2023 17:18:12) as /mnt/data/facu/inge1/ejercicios/cuis/CuisUniversity-5832.image!

!MerchantProcessor class methodsFor: 'instance creation' stamp: 'FGCL 6/11/2023 17:20:04'!
withStolenCreditCards: aListOfStolenCreditCards
	^self new initializeWithStolenCreditCards: aListOfStolenCreditCards.! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'FGCL 6/11/2023 17:20:21'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:20:20'!
initializeWithStolenCreditCards: aListOfStolenCreditCards.
	stolenCreditCards := aListOfStolenCreditCards.! !
!MerchantProcessor methodsFor: 'check credit card' stamp: 'FGCL 6/11/2023 17:21:31' prior: 50626586!
checkCreditCardNotStolen: aCreditCard
	(stolenCreditCards includes: aCreditCard) ifTrue: [ self error: MerchantProcessor stolenCreditCardErrorMessage ].! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:22:22' prior: 50626058!
createMerchantProcessor
	^MerchantProcessor withStolenCreditCards: (OrderedCollection with: self createStolenCreditCard).! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:23:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:23:17'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:23:17'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:23:17'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:23:17'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:23:17'!
FAILURE!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:23:20'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:23:22'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:23:22'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:23:36'!
FAILURE!
!CreditCard methodsFor: 'equality' stamp: 'FGCL 6/11/2023 17:24:00' overrides: 16901772!
= aCreditCard
	^false.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FGCL 6/11/2023 17:24:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiryYear expiryMonth owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:24:21' prior: 50626177!
initializeWithUser: anOwner withExpiryYear: aYear andMonth: aMonth
	owner := anOwner.
	expiryYear := aYear.
	expiryMonth := aMonth.! !
!CreditCard methodsFor: 'equality' stamp: 'FGCL 6/11/2023 17:24:51' prior: 50626671 overrides: 16901772!
= aCreditCard
	^(owner = aCreditCard owner) and: (self expiryDate = aCreditCard expiryDate).! !
!CreditCard methodsFor: 'getters' stamp: 'FGCL 6/11/2023 17:25:06'!
owner
	^owner.! !
!CreditCard methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:25:17'!
initializeWithOwner: anOwner withExpiryYear: aYear andMonth: aMonth
	owner := anOwner.
	expiryYear := aYear.
	expiryMonth := aMonth.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:25:17' prior: 50626190!
ofUser: aUser withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithOwner: aUser withExpiryYear: aYear andMonth: aMonth.! !

!methodRemoval: CreditCard #initializeWithUser:withExpiryYear:andMonth: stamp: 'FGCL 6/11/2023 17:25:17'!
initializeWithUser: anOwner withExpiryYear: aYear andMonth: aMonth
	owner := anOwner.
	expiryYear := aYear.
	expiryMonth := aMonth.!
!CreditCard class methodsFor: 'instance creation' stamp: 'FGCL 6/11/2023 17:25:28'!
withOwner: aUser withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithOwner: aUser withExpiryYear: aYear andMonth: aMonth.! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:25:28' prior: 50626134!
createExpiredCreditCard
	^CreditCard withOwner: (self validUser) withExpiryYear: (self lastYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:25:28' prior: 50626157!
createStolenCreditCard
	^CreditCard withOwner: (self invalidUser) withExpiryYear: (self nextYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:25:28' prior: 50626150!
createValidCreditCard
	^CreditCard withOwner: (self validUser) withExpiryYear: (self nextYear) andMonth: #May.! !

!methodRemoval: CreditCard class #ofUser:withExpiryYear:andMonth: stamp: 'FGCL 6/11/2023 17:25:28'!
ofUser: aUser withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithOwner: aUser withExpiryYear: aYear andMonth: aMonth.!
!CreditCard class methodsFor: 'instance creation' stamp: 'FGCL 6/11/2023 17:25:36' prior: 50626723!
withOwner: anOwner withExpiryYear: aYear andMonth: aMonth
	^self new initializeWithOwner: anOwner withExpiryYear: aYear andMonth: aMonth.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:25:37'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:25:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:25:37'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:25:37'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:25:37'!
ERROR!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:25:37'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:25:54' prior: 50626063!
test05CashierCantCheckoutWithAStolenCreditCard
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createStolenCreditCard.
	merchantProcessor := factory createMerchantProcessor.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:25:56'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:25:56'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:25:56'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:25:56'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:25:56'!
FAILURE!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:25:56'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:26:10' prior: 50626789!
test05CashierCantCheckoutWithAStolenCreditCard
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createStolenCreditCard.
	merchantProcessor := factory createMerchantProcessor.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor stolenCreditCardErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:26:11'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:26:11'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:26:11'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:26:11'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:26:11'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:26:11'!
PASSED!

----SNAPSHOT----(11 June 2023 17:26:13) CuisUniversity-5832.image priorSource: 9438135!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:29:27'!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithInsufficientFunds.
	merchantProcessor := factory createMerchantProcessor.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:29:56' prior: 50626869!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor cashier |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithInsufficientFunds.
	merchantProcessor := factory createMerchantProcessor.
	cashier := Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor.

	self should: [ 	 ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:30:38' prior: 50626888!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor cashier |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithInsufficientFunds.
	merchantProcessor := factory createMerchantProcessor.
	cashier := Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor.

	cart add: factory itemSoldByTheStore.

	self should: [ 	cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/11/2023 17:34:01'!
createCreditCardWithoutFunds
	^CreditCard withOwner: (self validUser) withExpiryYear: (self nextYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/11/2023 17:34:09' prior: 50626930!
createCreditCardWithoutFunds
	^CreditCard withOwner: (self validUser) withExpiryYear: (self nextYear) andMonth: #May.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:34:43' prior: 50626908!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor cashier |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithoutFunds.
	merchantProcessor := factory createMerchantProcessor.
	cashier := Cashier for: cart withCreditCard: creditCard withMerchantProcessor: merchantProcessor.

	cart add: factory itemSoldByTheStore.

	self should: [ 	cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'FGCL 6/11/2023 17:40:13'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'stolenCreditCards accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:40:12'!
initializeWithAccounts: aDictionaryOfUsersToAccountBalances WithStolenCreditCards: aListOfStolenCreditCards.
	accounts := aDictionaryOfUsersToAccountBalances.
	stolenCreditCards := aListOfStolenCreditCards.! !

!methodRemoval: MerchantProcessor #initializeWithStolenCreditCards: stamp: 'FGCL 6/11/2023 17:40:15'!
initializeWithStolenCreditCards: aListOfStolenCreditCards.
	stolenCreditCards := aListOfStolenCreditCards.!
!MerchantProcessor class methodsFor: 'instance creation' stamp: 'FGCL 6/11/2023 17:40:34'!
withAccounts: aDictionaryOfUsersToAccountBalances WithStolenCreditCards: aListOfStolenCreditCards.
	^self new initializeWithAccounts: aDictionaryOfUsersToAccountBalances WithStolenCreditCards: aListOfStolenCreditCards.! !

!methodRemoval: MerchantProcessor class #withStolenCreditCards: stamp: 'FGCL 6/11/2023 17:40:49'!
withStolenCreditCards: aListOfStolenCreditCards
	^self new initializeWithStolenCreditCards: aListOfStolenCreditCards.!
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:41:29' prior: 50626629!
createMerchantProcessor
	^MerchantProcessor withAccounts: self merchantProcessorAccounts WithStolenCreditCards: self merchantProcessorStolenCreditCards.! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:41:38'!
merchantProcessorStolenCreditCards.
	^OrderedCollection with: self createStolenCreditCard.! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:43:27'!
merchantProcessorAccounts
	| dictionary |
	
	dictionary := Dictionary new.
	
	dictionary at: self validUser put: 100. " TODO: Change balance "
	
	^dictionary.
	! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:43:42'!
userWithFunds
	^'Martin'.! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:43:42' prior: 50627022!
merchantProcessorAccounts
	| dictionary |
	
	dictionary := Dictionary new.
	
	dictionary at: self userWithFunds put: 100. " TODO: Change balance "
	
	^dictionary.
	! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:43:42' prior: 50626938!
createCreditCardWithoutFunds
	^CreditCard withOwner: (self userWithFunds) withExpiryYear: (self nextYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:43:42' prior: 50626747!
createValidCreditCard
	^CreditCard withOwner: (self userWithFunds) withExpiryYear: (self nextYear) andMonth: #May.! !
!TusLibrosTestObjectFactory methodsFor: 'as yet unclassified' stamp: 'FGCL 6/11/2023 17:43:42' prior: 50626731!
createExpiredCreditCard
	^CreditCard withOwner: (self userWithFunds) withExpiryYear: (self lastYear) andMonth: #May.! !

!methodRemoval: TusLibrosTestObjectFactory #validUser stamp: 'FGCL 6/11/2023 17:43:42'!
validUser
	^'Martin'.!
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:43:50'!
userWithoutFunds
	^'Galileo'.! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:43:54' prior: 50626129!
invalidUser
	^'Federico'.! !
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 17:44:09' prior: 50627036!
merchantProcessorAccounts
	| dictionary |
	
	dictionary := Dictionary new.
	
	dictionary at: self userWithFunds put: 100. " TODO: Change balance "
	dictionary at: self userWithoutFunds put: 0.
	
	^dictionary.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:44:40'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:44:40'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:44:40'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:44:40'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:44:40'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:44:40'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:44:40'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:44:43'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:44:43'!
FAILURE!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/11/2023 17:45:28'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:45:27' prior: 50626460!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	merchantProcessor checkValidCreditCard: creditCard.! !
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/11/2023 17:45:41'!
checkValidCreditCard
	self checkCartNotEmpty.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:45:48' prior: 50627131!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.! !
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/11/2023 17:45:53' prior: 50627141!
checkValidCreditCard
	merchantProcessor checkValidCreditCard: creditCard.! !
!Cashier methodsFor: 'checks' stamp: 'FGCL 6/11/2023 17:46:10' prior: 50625943!
checkValidCheckOut
	self checkCartNotEmpty.! !
!Cashier methodsFor: 'checkout' stamp: 'FGCL 6/11/2023 17:46:52' prior: 50625933!
checkOut
	self checkValidCheckOut.
	merchantProcessor charge: self totalPrice on: creditCard.
	
	^cart items.! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:47:09'!
totalPrice
	^0.! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:47:30' prior: 50627172!
totalPrice! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:47:32' prior: 50627176!
totalPrice
! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:47:33' prior: 50627179!
totalPrice! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:47:49' prior: 50627182!
totalPrice! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:47:59' prior: 50627185!
totalPrice
	^0.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:49:15'!
initializeFor: aCart withCreditCard: aCreditCard withPrices: aListOfPrices withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:49:32' prior: 50627191!
initializeFor: aCart withCreditCard: aCreditCard withPrices: aListOfPrices withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.! !
!Cart methodsFor: 'testing' stamp: 'FGCL 6/11/2023 17:51:23' prior: 50624415!
includes: anItem

	^items includesKey: anItem ! !
!TusLibrosTestObjectFactory methodsFor: 'catalog' stamp: 'FGCL 6/11/2023 17:51:55' prior: 50624581!
defaultCatalog
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSoldByTheStore put: self itemNotSoldByTheStorePrice.
	
	^catalog.! !
!TusLibrosTestObjectFactory methodsFor: 'catalog' stamp: 'FGCL 6/11/2023 17:52:01'!
itemSoldByTheStorePrice
	^100.! !
!TusLibrosTestObjectFactory methodsFor: 'catalog' stamp: 'FGCL 6/11/2023 17:52:09' prior: 50627217!
defaultCatalog
	| catalog |
	
	catalog := Dictionary new.
	catalog at: self itemSoldByTheStore put: self itemSoldByTheStorePrice.
	
	^catalog.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:52:19'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:52:19'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:52:19'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:52:19'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:52:19'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:52:19'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/11/2023 17:52:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/11/2023 17:52:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/11/2023 17:52:25'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/11/2023 17:52:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/11/2023 17:52:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/11/2023 17:52:25'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/11/2023 17:52:25'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/11/2023 17:52:25'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'FGCL 6/11/2023 17:52:35' prior: 50627212!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'assertions' stamp: 'FGCL 6/11/2023 17:52:46' prior: 50624392!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/11/2023 17:52:48'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:52:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:52:49'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:52:49'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:52:49'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:52:49'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:52:49'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:52:52'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:52:52'!
ERROR!
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 17:53:20'!
charge: aCharge on: aUser! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:53:30'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:53:30'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:53:30'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:53:30'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:53:30'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:53:30'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:53:30'!
FAILURE!

!methodRemoval: Cashier #initializeFor:withCreditCard:withMerchantProcessor: stamp: 'FGCL 6/11/2023 17:53:49'!
initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.!
!Cashier class methodsFor: 'instance creation' stamp: 'FGCL 6/11/2023 17:54:10'!
for: aCart withCreditCard: aCreditCard withACatalog: aCatalog withMerchantProcessor: aMerchantProcessor
	^self new initializeFor: aCart withCreditCard: aCreditCard withACatalog: aCatalog withMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: Cashier class #for:withCreditCard:withMerchantProcessor: stamp: 'FGCL 6/11/2023 17:54:13'!
for: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor
	^self new initializeFor: aCart withCreditCard: aCreditCard withMerchantProcessor: aMerchantProcessor.!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:54:21'!
initializeFor: aCart withCreditCard: aCreditCard withACatalog: aListOfPrices withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.! !

!methodRemoval: Cashier #initializeFor:withCreditCard:withPrices:withMerchantProcessor: stamp: 'FGCL 6/11/2023 17:54:21'!
initializeFor: aCart withCreditCard: aCreditCard withPrices: aListOfPrices withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FGCL 6/11/2023 17:54:39'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard merchantProcessor catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 17:54:38' prior: 50627404!
initializeFor: aCart withCreditCard: aCreditCard withACatalog: aCatalog withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	
	self checkValidCreditCard.! !
!Cashier methodsFor: 'price' stamp: 'FGCL 6/11/2023 17:55:22' prior: 50627188!
totalPrice
	^(cart items collect: [ :anItem | catalog at: anItem ]) sum.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:56:39' prior: 50626242!
test01CashierCantCheckOutEmptyCart
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: (factory createValidCreditCard) withCatalog: factory defaultCatalog withMerchantProcessor: (factory createMerchantProcessor).
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FGCL 6/11/2023 17:56:51'!
for: aCart withCreditCard: aCreditCard withCatalog: aCatalog withMerchantProcessor: aMerchantProcessor
	^self new initializeFor: aCart withCreditCard: aCreditCard withACatalog: aCatalog withMerchantProcessor: aMerchantProcessor.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:56:56' prior: 50626258!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: (factory createValidCreditCard) withCatalog: factory defaultCatalog withMerchantProcessor: (factory createMerchantProcessor).
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:56:58' prior: 50626271!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier for: cart withCreditCard: (factory createValidCreditCard) withCatalog: factory defaultCatalog withMerchantProcessor: (factory createMerchantProcessor).
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:57:03' prior: 50626529!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [ 	Cashier for: cart withCreditCard: creditCard withCatalog: factory defaultCatalog withMerchantProcessor: (factory createMerchantProcessor)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:57:44' prior: 50627506!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [
		Cashier
			for: cart
			withCreditCard: creditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: (factory createMerchantProcessor)
	]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:57:59' prior: 50627450!
test01CashierCantCheckOutEmptyCart
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (Cashier emptyCartErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:58:22' prior: 50627477!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:58:37' prior: 50627491!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart items) equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:58:53' prior: 50626828!
test05CashierCantCheckoutWithAStolenCreditCard
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createStolenCreditCard.
	merchantProcessor := factory createMerchantProcessor.

	self should: [
		Cashier
			for: cart
			withCreditCard: creditCard
			withMerchantProcessor: merchantProcessor
		]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor stolenCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:59:08' prior: 50626945!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor cashier |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithoutFunds.
	merchantProcessor := factory createMerchantProcessor.
	cashier :=	Cashier
				for: cart
				withCreditCard: creditCard
				withMerchantProcessor: merchantProcessor.

	cart add: factory itemSoldByTheStore.

	self should: [ 	cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:59:11' prior: 50627608!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor cashier |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithoutFunds.
	merchantProcessor := factory createMerchantProcessor.
	cashier :=	Cashier
				for: cart
				withCreditCard: creditCard
				 withCatalog: factory defaultCatalog
				withMerchantProcessor: merchantProcessor.

	cart add: factory itemSoldByTheStore.

	self should: [ 	cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:59:12' prior: 50627629!
test06CashierCantCheckoutWithInsufficientFunds
	| cart creditCard merchantProcessor cashier |
	
	cart := factory createCart.
	creditCard := factory createCreditCardWithoutFunds.
	merchantProcessor := factory createMerchantProcessor.
	cashier :=	Cashier
				for: cart
				withCreditCard: creditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: merchantProcessor.

	cart add: factory itemSoldByTheStore.

	self should: [ 	cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:59:17' prior: 50627589!
test05CashierCantCheckoutWithAStolenCreditCard
	| cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createStolenCreditCard.
	merchantProcessor := factory createMerchantProcessor.

	self should: [
		Cashier
			for: cart
			withCreditCard: creditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: merchantProcessor
		]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor stolenCreditCardErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:59:19'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 17:59:20'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 17:59:20'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 17:59:20'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 17:59:20'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 17:59:20'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:59:20'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 17:59:20'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/11/2023 17:59:23'!
PASSED!

----SNAPSHOT----(11 June 2023 17:59:25) CuisUniversity-5832.image priorSource: 9446912!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 17:59:43' prior: 50627524!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.

	self should: [
		Cashier
			for: cart
			withCreditCard: creditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: (factory createMerchantProcessor)
		]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 17:59:59' prior: 50627347!
charge: aCharge on: aUser
	! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:02:38' prior: 50627771!
charge: aCharge on: aCreditCard
	| balance |
	
	self checkCanCharge: aCharge on: aCreditCard owner.
	
	balance := accounts at: aCreditCard owner.
	accounts at: aCreditCard owner put: balance - aCharge.
	! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:04:15'!
checkCanCharge: aCharge on: aUser.
	^(accounts at: aUser) >= aCharge.! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:04:31' prior: 50627784!
checkCanCharge: aCharge on: aUser.
	((accounts at: aUser) >= aCharge) ifFalse: [ self error: MerchantProcessor ].! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:04:43' prior: 50627790!
checkCanCharge: aCharge on: aUser.
	((accounts at: aUser) >= aCharge) ifFalse: [ self error: MerchantProcessor insufficientFundsErrorMessage ].! !
!MerchantProcessor class methodsFor: 'errors' stamp: 'FGCL 6/11/2023 18:04:55'!
insufficientFundsErrorMessage
	^'Insufficient funds'.! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:05:59' prior: 50627775!
charge: aCharge on: aCreditCard
	| balance |
	
	self checkCanCharge: aCharge on: aCreditCard.
	
	balance := accounts at: aCreditCard owner.
	accounts at: aCreditCard owner put: balance - aCharge.
	! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:06:45' prior: 50627797!
checkCanCharge: aCharge on: aCreditCard.
	self checkValidCreditCard: aCreditCard.
	self check: aCreditCard owner hasEnoughFundsFor: aCharge.! !
!MerchantProcessor methodsFor: 'charge' stamp: 'FGCL 6/11/2023 18:06:57'!
check: anOwner hasEnoughFundsFor: aCharge.
	((accounts at: anOwner) >= aCharge) ifFalse: [ self error: MerchantProcessor insufficientFundsErrorMessage ].! !

----SNAPSHOT----(11 June 2023 18:07:24) CuisUniversity-5832.image priorSource: 9475126!

!methodRemoval: Cashier #checkValidCreditCard stamp: 'FGCL 6/11/2023 18:07:41'!
checkValidCreditCard
	merchantProcessor checkValidCreditCard: creditCard.!
!Cashier methodsFor: 'initialization' stamp: 'FGCL 6/11/2023 18:07:47' prior: 50627434!
initializeFor: aCart withCreditCard: aCreditCard withACatalog: aCatalog withMerchantProcessor: aMerchantProcessor
	cart := aCart.
	creditCard := aCreditCard.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:08:30' prior: 50627752!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.
	cashier := Cashier
			for: cart
			withCreditCard: creditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: (factory createMerchantProcessor).

	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:09:00' prior: 50627853!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart creditCard |
	
	cart := factory createCart.
	creditCard := factory createExpiredCreditCard.
	cashier := Cashier
			for: cart
			withCreditCard: creditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: (factory createMerchantProcessor).

	cart add: factory itemSoldByTheStore.

	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:09:36' prior: 50627675!
test05CashierCantCheckoutWithAStolenCreditCard
	| cashier cart creditCard merchantProcessor |
	
	cart := factory createCart.
	creditCard := factory createStolenCreditCard.
	merchantProcessor := factory createMerchantProcessor.
	cashier := Cashier
			for: cart
			withCreditCard: creditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: merchantProcessor.
	
	cart add: factory itemSoldByTheStore.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor stolenCreditCardErrorMessage) equals: anError messageText ].! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:09:40'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:09:40'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:09:40'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:09:40'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:09:40'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:09:40'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:09:44'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:09:44'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:10:05'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:10:05'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:10:05'!
ERROR!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:10:05'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:10:05'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:10:05'!
FAILURE!
!TusLibrosTestObjectFactory methodsFor: 'catalog' stamp: 'FGCL 6/11/2023 18:10:45' prior: 50627225!
itemSoldByTheStorePrice
	^1.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:10:46'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:10:46'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:10:46'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:10:46'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:10:46'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:10:46'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:10:46'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:10:52'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:10:52'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:11:07'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:11:07'!
FAILURE!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:11:31'!
FAILURE!
!TusLibrosTestObjectFactory methodsFor: 'creditCards' stamp: 'FGCL 6/11/2023 18:12:48' prior: 50627045!
createCreditCardWithoutFunds
	^CreditCard withOwner: (self userWithoutFunds) withExpiryYear: (self nextYear) andMonth: #May.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:12:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:12:49'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:12:49'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:12:49'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:12:49'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:12:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:13:51' prior: 50627872!
test04CashierCantCheckoutWithAnExpiredCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
			for: cart
			withCreditCard: factory createExpiredCreditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: (factory createMerchantProcessor).

	cart add: factory itemSoldByTheStore.

	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor expiredCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:14:06' prior: 50627893!
test05CashierCantCheckoutWithAStolenCreditCard
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
			for: cart
			withCreditCard: factory createStolenCreditCard
			withCatalog: factory defaultCatalog
			withMerchantProcessor: factory createMerchantProcessor.
	
	cart add: factory itemSoldByTheStore.
	
	self should: [ cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor stolenCreditCardErrorMessage) equals: anError messageText ].! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:14:24' prior: 50627652!
test06CashierCantCheckoutWithInsufficientFunds
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createCreditCardWithoutFunds
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.

	self should: [ 	cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: (MerchantProcessor insufficientFundsErrorMessage) equals: anError messageText ].! !

----SNAPSHOT----(11 June 2023 18:14:36) CuisUniversity-5832.image priorSource: 9477884!
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 18:15:34' prior: 50627082!
merchantProcessorAccounts
	| accounts |
	
	accounts := Dictionary new.
	
	accounts at: self userWithFunds put: 100. " TODO: Change balance "
	accounts at: self userWithoutFunds put: 0.
	
	^accounts.! !

----SNAPSHOT----(11 June 2023 18:15:37) CuisUniversity-5832.image priorSource: 9486258!
!TusLibrosTestObjectFactory methodsFor: 'merchantProcessor' stamp: 'FGCL 6/11/2023 18:16:21' prior: 50628100!
merchantProcessorAccounts
	| accounts |
	
	accounts := Dictionary new.
	
	accounts at: self userWithFunds put: 100.
	accounts at: self userWithoutFunds put: 0.
	
	^accounts.! !

----SNAPSHOT----(11 June 2023 18:16:22) CuisUniversity-5832.image priorSource: 9486665!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:17:15'!
test07SuccesfullCheckout
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.

	self assert: cart list equals: cashier checkOut.! !

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:17:16'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:17:20' prior: 50628124!
test07SuccesfullCheckout
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.

	self assert: cart items equals: cashier checkOut.! !

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:17:21'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'FGCL 6/11/2023 18:19:01' prior: 50627166!
checkOut
	self checkValidCheckOut.
	merchantProcessor charge: self totalPrice on: creditCard.
	
	^{cart items. self totalPrice}.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:19:14' prior: 50628141!
test07SuccesfullCheckout
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.

	self assert: {cart items. 1} equals: cashier checkOut.! !

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:19:15'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:19:15'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:19:15'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:19:15'!
FAILURE!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:19:15'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:19:15'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:19:15'!
PASSED!

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:19:15'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'FGCL 6/11/2023 18:19:33' prior: 50628182!
checkOut
	self checkValidCheckOut.
	merchantProcessor charge: self totalPrice on: creditCard.
	
	^cart items.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:19:40' prior: 50628189!
test07SuccesfullCheckout
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.

	self assert: cart items equals: cashier checkOut.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:19:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:20:00' prior: 50628237!
test07SuccesfullCheckout
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.

	self assert: {cart items. 1} equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:20:11' prior: 50627559!
test02CashierCanCheckOutCartWithOneItem
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.
	
	cart add: factory itemSoldByTheStore.
	self assert: {cart items. 1} equals: cashier checkOut.! !
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:20:47' prior: 50628275!
test07SuccesfullCheckout
	" Este test es el mismo que el test02, pero en la consigna nos pidieron que lo hagamos. "
	| cart cashier |
	
	cart := factory createCart.
	cashier :=	Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.

	cart add: factory itemSoldByTheStore.
	self assert: {cart items. 1} equals: cashier checkOut.! !

----SNAPSHOT----(11 June 2023 18:20:49) CuisUniversity-5832.image priorSource: 9487056!
!CashierTest methodsFor: 'tests' stamp: 'FGCL 6/11/2023 18:20:56' prior: 50627574!
test03CashierCanCheckOutCartWithManyItems
	| cashier cart |
	
	cart := factory createCart.
	cashier := Cashier
				for: cart
				withCreditCard: factory createValidCreditCard
				withCatalog: factory defaultCatalog
				withMerchantProcessor: factory createMerchantProcessor.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: {cart items. 2} equals: cashier checkOut.! !
!Cashier methodsFor: 'checkout' stamp: 'FGCL 6/11/2023 18:21:11' prior: 50628230!
checkOut
	self checkValidCheckOut.
	merchantProcessor charge: self totalPrice on: creditCard.
	
	^{cart items. self totalPrice}.! !

!testRun: #CashierTest #test01CashierCantCheckOutEmptyCart stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckOutCartWithOneItem stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckOutCartWithManyItems stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CashierTest #test04CashierCantCheckoutWithAnExpiredCreditCard stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CashierTest #test05CashierCantCheckoutWithAStolenCreditCard stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CashierTest #test06CashierCantCheckoutWithInsufficientFunds stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CashierTest #test07SuccesfullCheckout stamp: 'FGCL 6/11/2023 18:21:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/11/2023 18:21:14'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FGCL 6/11/2023 18:21:28'!
PASSED!

----SNAPSHOT----(11 June 2023 18:22:51) CuisUniversity-5832.image priorSource: 9493439!